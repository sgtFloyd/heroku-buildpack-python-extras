#!/usr/bin/env bash

# This script serves as the
# [**Python Buildpack**](https://github.com/heroku/heroku-buildpack-python)
# compiler.
#
# A [buildpack](http://devcenter.heroku.com/articles/buildpacks) is an
# adapter between a Python application and Heroku's runtime.
#
# You can intreract with the Heroku API directly with [heroku.py](https://github.com/heroku/heroku.py/).
#
# See also: [Release history](/changelog.html), [Detection](/detect.html).
#
# ## Usage
# Compiling an app into a slug is simple:
#
#     $ bin/compile <build-dir> <cache-dir>


# ## Assumptions
#
# This buildpack makes the following assumptions:
#
# - The desired Python VM is available on the base system.
# - Library dependencies are available on the base system.

# <hr />

# ## Context

# Fail fast and fail hard.
set -eo pipefail

# Sanitizing environment variables.
unset GIT_DIR

# Paths.
export BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
export ROOT_DIR=$(dirname $BIN_DIR)
export BUILD_DIR="$1"
export CACHE_DIR="$2"

# Syntax sugar.
source "$BIN_DIR/utils"

# Directory Hacks for path consistiency.
APP_DIR=${APP_DIR:-$HOME}
TMP_APP_DIR="$CACHE_DIR/tmp_app_dir"

# Copy Anvil app dir to temporary storage...
puts_step "Creating Build Directory"
mkdir -p "$TMP_APP_DIR"
deep_mv "$APP_DIR" "$TMP_APP_DIR"

# Copy Application code in.
deep_mv "$BUILD_DIR" "$APP_DIR"

# Set new context.
ORIG_BUILD_DIR="$BUILD_DIR"
BUILD_DIR="$APP_DIR"

# Other configuration
export PROFILE_DIR="$BUILD_DIR/.profile.d"
export PROFILE_PATH="$PROFILE_DIR/python-extras.sh"
export HEROKU_DIR=".heroku"
export HEROKU_VENDOR_DIR="$HEROKU_DIR/vendor"
export HEROKU_LIB_DIR="$HEROKU_VENDOR_DIR/lib"
export LANG="en_US.UTF-8"
export TIME_STEP_THRESHOLD=${TIME_STEP_THRESHOLD:-10}

# Where to store the Pip download cache.
CACHED_DIRS=("$HEROKU_DIR" ".bundle" ".sass-cache")

# Switch to the repo's context.
cd "$BUILD_DIR"

# Experimental pre_compile hook.
source "$BIN_DIR/steps/hooks/pre_compile"

# ### The Cache
mkdir -p "$CACHE_DIR"

# Restore old artifacts from the cache.
if [ ! "$CLEAR_CACHE" ]; then
    puts_step "Restoring Cached Artifacts"
    for dir in $CACHED_DIRS; do
        cp -R "$CACHE_DIR/$dir" . &> /dev/null || true
    done
fi

set +e
# Create set-aside `.heroku` folder.
mkdir "$HEROKU_DIR" &> /dev/null
set -e

# Install specified Python version.
source "$BIN_DIR/steps/python"

# Install Pip dependencies
source "$BIN_DIR/steps/pip"

# Install required node packages if there's a package.json.
if [ -f package.json ] && [ ! "$DISABLE_NPM" ]; then
    source "$BIN_DIR/steps/npm"
fi

# ### Finalize
#

# Store new artifacts in cache.
puts_step "Caching Artifacts"
for dir in $CACHED_DIRS; do
    rm -rf "$CACHE_DIR/$dir"
    cp -R "$dir" "$CACHE_DIR/"
done

# Set context environment variables.
puts_step "Setting up ENV"
mkdir -p $(dirname $PROFILE_PATH)
set_env_default LIBRARY_PATH "$(app_path $HEROKU_LIB_DIR)"
set_env_default LD_LIBRARY_PATH "$(app_path $HEROKU_LIB_DIR)"
set_env_default LANG "$LANG"

# Experimental post_compile hook.
source "$BIN_DIR/steps/hooks/post_compile"

puts_step "Moving App Directory"
deep_mv "$BUILD_DIR" "$ORIG_BUILD_DIR"
deep_mv "$TMP_APP_DIR" "$APP_DIR"

# Output last elapsed time
time_step
